// <auto-generated />
using System;
using EFCDataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EFCDataBase.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20221203201141_reFixThemMigrations2")]
    partial class reFixThemMigrations2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entity.Box", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Light")
                        .HasColumnType("boolean");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username1")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Username1");

                    b.ToTable("Box");
                });

            modelBuilder.Entity("Entity.Record", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BoxId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("CO2")
                        .HasColumnType("real");

                    b.Property<float>("DewPt")
                        .HasColumnType("real");

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BoxId");

                    b.ToTable("Record");
                });

            modelBuilder.Entity("Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("Sex")
                        .HasColumnType("character(1)");

                    b.HasKey("Id", "Username");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entity.Box", b =>
                {
                    b.HasOne("Entity.User", null)
                        .WithMany("BoxId")
                        .HasForeignKey("UserId", "Username1");
                });

            modelBuilder.Entity("Entity.Record", b =>
                {
                    b.HasOne("Entity.Box", null)
                        .WithMany("Records")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Box", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("Entity.User", b =>
                {
                    b.Navigation("BoxId");
                });
#pragma warning restore 612, 618
        }
    }
}
